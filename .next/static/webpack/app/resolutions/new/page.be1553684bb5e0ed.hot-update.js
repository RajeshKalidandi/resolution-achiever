"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/resolutions/new/page",{

/***/ "(app-pages-browser)/./src/lib/resolution-service.ts":
/*!***************************************!*\
  !*** ./src/lib/resolution-service.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolutionService: function() { return /* binding */ resolutionService; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(app-pages-browser)/./src/lib/errors.ts\");\n\n\nconst resolutionService = {\n    async createResolution (data) {\n        const { data: { user }, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (userError) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(userError.message, \"AUTH_ERROR\", 401);\n        if (!user) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(\"User not found\", \"AUTH_ERROR\", 404);\n        const { data: resolution, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolutions\").insert([\n            {\n                ...data,\n                user_id: user.id\n            }\n        ]).select(\"*\").single();\n        if (error) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(error.message, error.code, 500);\n        return resolution;\n    },\n    async updateResolution (id, data) {\n        const { data: resolution, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolutions\").update(data).eq(\"id\", id).select(\"*\").single();\n        if (error) throw error;\n        return resolution;\n    },\n    async deleteResolution (id) {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolutions\").delete().eq(\"id\", id);\n        if (error) throw error;\n    },\n    async getResolution (id) {\n        const { data: resolution, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolutions\").select(\"\\n        *,\\n        milestones (*)\\n      \").eq(\"id\", id).single();\n        if (error) throw error;\n        return resolution;\n    },\n    async getUserResolutions () {\n        const { data: { user }, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (userError) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(userError.message, \"AUTH_ERROR\", 401);\n        if (!user) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(\"User not found\", \"AUTH_ERROR\", 404);\n        const { data: resolutions, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolutions\").select(\"*\").eq(\"user_id\", user.id).order(\"created_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return resolutions;\n    },\n    async addMilestone (data) {\n        const { data: milestone, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"milestones\").insert([\n            data\n        ]).select(\"*\").single();\n        if (error) throw error;\n        return milestone;\n    },\n    async updateMilestone (id, data) {\n        const { data: milestone, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"milestones\").update(data).eq(\"id\", id).select(\"*\").single();\n        if (error) throw error;\n        return milestone;\n    },\n    async deleteMilestone (id) {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"milestones\").delete().eq(\"id\", id);\n        if (error) throw error;\n    },\n    async toggleMilestoneCompletion (id, completed) {\n        const now = new Date().toISOString();\n        const { data: milestone, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"milestones\").update({\n            status: completed ? \"completed\" : \"in_progress\",\n            completed_at: completed ? now : null,\n            updated_at: now\n        }).eq(\"id\", id).select(\"*\").single();\n        if (error) throw error;\n        return milestone;\n    },\n    async getSharedResolutions () {\n        const { data: { user }, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (userError) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(userError.message, \"AUTH_ERROR\", 401);\n        if (!user) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(\"User not found\", \"AUTH_ERROR\", 404);\n        const { data: resolutions, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolutions\").select(\"\\n        *,\\n        resolution_shares!inner (\\n          shared_with_email,\\n          permission\\n        )\\n      \").eq(\"resolution_shares.shared_with_email\", user.email);\n        if (error) throw error;\n        return resolutions;\n    },\n    async shareResolution (resolutionId, email) {\n        let permission = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"view\";\n        const { data: { user }, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (userError) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(userError.message, \"AUTH_ERROR\", 401);\n        if (!user) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(\"User not found\", \"AUTH_ERROR\", 404);\n        // Check if resolution exists and belongs to user\n        const { data: resolution, error: resolutionError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolutions\").select(\"user_id\").eq(\"id\", resolutionId).single();\n        if (resolutionError) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(resolutionError.message, resolutionError.code, 500);\n        if (!resolution) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(\"Resolution not found\", \"NOT_FOUND\", 404);\n        if (resolution.user_id !== user.id) throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(\"Not authorized\", \"UNAUTHORIZED\", 403);\n        // Create share record\n        const { error: shareError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolution_shares\").insert({\n            resolution_id: resolutionId,\n            shared_with_email: email,\n            shared_by: user.id,\n            permission\n        });\n        if (shareError) {\n            if (shareError.code === \"23505\") {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(\"Resolution already shared with this user\", \"ALREADY_SHARED\", 400);\n            }\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AppError(shareError.message, shareError.code, 500);\n        }\n    },\n    async removeShare (resolutionId, userId) {\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolution_shares\").delete().eq(\"resolution_id\", resolutionId).eq(\"shared_with_id\", userId);\n        if (error) throw error;\n    },\n    async getSharedUsers (resolutionId) {\n        const { data: shares, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"resolution_shares\").select(\"\\n        shared_with_id,\\n        shared_with_email,\\n        permission\\n      \").eq(\"resolution_id\", resolutionId);\n        if (error) throw error;\n        return shares.map((share)=>({\n                id: share.shared_with_id,\n                email: share.shared_with_email,\n                permission: share.permission\n            }));\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/resolution-service.ts\n"));

/***/ })

});